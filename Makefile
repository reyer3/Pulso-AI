# üöÄ Pulso-AI Development Makefile
# Commands para setup y desarrollo r√°pido

.PHONY: help setup install-deps start-services stop-services restart-services test lint format clean logs status

# Variables
PYTHON_VERSION = 3.11
NODE_VERSION = 18
BACKEND_DIR = core-template
FRONTEND_DIR = frontend

# Colores para output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

## üìã Help - Lista todos los comandos disponibles
help:
	@echo "$(BLUE)üöÄ Pulso-AI Development Commands$(NC)"
	@echo ""
	@echo "$(GREEN)Setup Commands:$(NC)"
	@echo "  make setup          - Setup completo del entorno de desarrollo"
	@echo "  make install-deps   - Instala todas las dependencias"
	@echo ""
	@echo "$(GREEN)Service Commands:$(NC)"
	@echo "  make start-services - Inicia servicios Docker (PostgreSQL, Redis)"
	@echo "  make stop-services  - Detiene servicios Docker"
	@echo "  make restart-services - Reinicia servicios Docker"
	@echo "  make logs          - Muestra logs de servicios"
	@echo "  make status        - Estado de servicios"
	@echo ""
	@echo "$(GREEN)Development Commands:$(NC)"
	@echo "  make test          - Ejecuta todos los tests"
	@echo "  make lint          - Ejecuta linters en todo el c√≥digo"
	@echo "  make format        - Formatea todo el c√≥digo"
	@echo "  make clean         - Limpia archivos temporales"
	@echo ""
	@echo "$(GREEN)Admin Tools:$(NC)"
	@echo "  make admin-tools   - Inicia Adminer y Redis Commander"
	@echo "  make db-shell      - Conecta a PostgreSQL shell"
	@echo "  make redis-shell   - Conecta a Redis shell"

## üõ†Ô∏è Setup completo del entorno de desarrollo
setup: check-requirements create-directories start-services install-deps
	@echo "$(GREEN)‚úÖ Entorno de desarrollo configurado exitosamente!$(NC)"
	@echo ""
	@echo "$(YELLOW)Next steps:$(NC)"
	@echo "1. Configura tu IDE con las settings de .vscode/"
	@echo "2. Activa pre-commit hooks: pre-commit install"
	@echo "3. Ejecuta tests: make test"
	@echo "4. Consulta la documentaci√≥n: docs/development.md"

## üîç Verifica requirements del sistema
check-requirements:
	@echo "$(BLUE)üîç Verificando requirements...$(NC)"
	@command -v docker >/dev/null 2>&1 || { echo "$(RED)‚ùå Docker no est√° instalado$(NC)"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || { echo "$(RED)‚ùå Docker Compose no est√° instalado$(NC)"; exit 1; }
	@command -v python3 >/dev/null 2>&1 || { echo "$(RED)‚ùå Python 3 no est√° instalado$(NC)"; exit 1; }
	@command -v node >/dev/null 2>&1 || { echo "$(RED)‚ùå Node.js no est√° instalado$(NC)"; exit 1; }
	@echo "$(GREEN)‚úÖ Todos los requirements est√°n instalados$(NC)"

## üìÅ Crea directorios necesarios
create-directories:
	@echo "$(BLUE)üìÅ Creando estructura de directorios...$(NC)"
	@mkdir -p $(BACKEND_DIR)/src/{domain,application,infrastructure,api}
	@mkdir -p $(BACKEND_DIR)/tests/{unit,integration,e2e}
	@mkdir -p $(BACKEND_DIR)/requirements
	@mkdir -p $(FRONTEND_DIR)/src/{components,hooks,graphql,utils}
	@mkdir -p docs infrastructure/postgres shared/{auth,monitoring,utils}
	@mkdir -p clients/template
	@echo "$(GREEN)‚úÖ Directorios creados$(NC)"

## üì¶ Instala todas las dependencias
install-deps: install-backend-deps install-frontend-deps
	@echo "$(GREEN)‚úÖ Todas las dependencias instaladas$(NC)"

## üêç Instala dependencias del backend
install-backend-deps:
	@echo "$(BLUE)üêç Instalando dependencias del backend...$(NC)"
	@if [ ! -d "$(BACKEND_DIR)/venv" ]; then \
		cd $(BACKEND_DIR) && python3 -m venv venv; \
	fi
	@cd $(BACKEND_DIR) && source venv/bin/activate && pip install --upgrade pip
	@if [ -f "$(BACKEND_DIR)/requirements/dev.txt" ]; then \
		cd $(BACKEND_DIR) && source venv/bin/activate && pip install -r requirements/dev.txt; \
	fi

## ‚öõÔ∏è Instala dependencias del frontend
install-frontend-deps:
	@echo "$(BLUE)‚öõÔ∏è Instalando dependencias del frontend...$(NC)"
	@if [ -f "$(FRONTEND_DIR)/package.json" ]; then \
		cd $(FRONTEND_DIR) && npm install; \
	fi

## üê≥ Inicia servicios Docker
start-services:
	@echo "$(BLUE)üê≥ Iniciando servicios Docker...$(NC)"
	@docker-compose up -d postgres redis
	@echo "$(GREEN)‚úÖ Servicios iniciados$(NC)"
	@make status

## üõë Detiene servicios Docker
stop-services:
	@echo "$(BLUE)üõë Deteniendo servicios Docker...$(NC)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ Servicios detenidos$(NC)"

## üîÑ Reinicia servicios Docker
restart-services:
	@echo "$(BLUE)üîÑ Reiniciando servicios Docker...$(NC)"
	@docker-compose restart postgres redis
	@echo "$(GREEN)‚úÖ Servicios reiniciados$(NC)"

## üîß Inicia herramientas de administraci√≥n
admin-tools:
	@echo "$(BLUE)üîß Iniciando herramientas de administraci√≥n...$(NC)"
	@docker-compose --profile admin up -d adminer redis-commander
	@echo "$(GREEN)‚úÖ Admin tools disponibles:$(NC)"
	@echo "  - Adminer (PostgreSQL): http://localhost:8080"
	@echo "  - Redis Commander: http://localhost:8081"

## üìä Estado de servicios
status:
	@echo "$(BLUE)üìä Estado de servicios:$(NC)"
	@docker-compose ps

## üìù Muestra logs de servicios
logs:
	@docker-compose logs -f --tail=100

## üóÑÔ∏è Conecta a PostgreSQL shell
db-shell:
	@echo "$(BLUE)üóÑÔ∏è Conectando a PostgreSQL...$(NC)"
	@docker-compose exec postgres psql -U pulso_ai -d pulso_ai_dev

## üî¥ Conecta a Redis shell
redis-shell:
	@echo "$(BLUE)üî¥ Conectando a Redis...$(NC)"
	@docker-compose exec redis redis-cli -a dev_redis_2024

## üß™ Ejecuta todos los tests
test: test-backend test-frontend
	@echo "$(GREEN)‚úÖ Todos los tests completados$(NC)"

## üêç Tests del backend
test-backend:
	@echo "$(BLUE)üß™ Ejecutando tests del backend...$(NC)"
	@if [ -d "$(BACKEND_DIR)/venv" ]; then \
		cd $(BACKEND_DIR) && source venv/bin/activate && \
		if command -v pytest >/dev/null 2>&1; then \
			pytest tests/ -v --cov=src --cov-report=term-missing; \
		else \
			echo "$(YELLOW)‚ö†Ô∏è pytest no instalado, saltando tests de backend$(NC)"; \
		fi \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Virtual environment no encontrado, saltando tests de backend$(NC)"; \
	fi

## ‚öõÔ∏è Tests del frontend
test-frontend:
	@echo "$(BLUE)üß™ Ejecutando tests del frontend...$(NC)"
	@if [ -f "$(FRONTEND_DIR)/package.json" ]; then \
		cd $(FRONTEND_DIR) && npm test; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Frontend no configurado, saltando tests$(NC)"; \
	fi

## üîç Ejecuta linters
lint: lint-backend lint-frontend
	@echo "$(GREEN)‚úÖ Linting completado$(NC)"

## üêç Linting del backend
lint-backend:
	@echo "$(BLUE)üîç Ejecutando linters del backend...$(NC)"
	@if [ -d "$(BACKEND_DIR)/venv" ]; then \
		cd $(BACKEND_DIR) && source venv/bin/activate && \
		if command -v flake8 >/dev/null 2>&1; then flake8 src/ tests/; fi && \
		if command -v mypy >/dev/null 2>&1; then mypy src/; fi; \
	fi

## ‚öõÔ∏è Linting del frontend
lint-frontend:
	@echo "$(BLUE)üîç Ejecutando linters del frontend...$(NC)"
	@if [ -f "$(FRONTEND_DIR)/package.json" ]; then \
		cd $(FRONTEND_DIR) && npm run lint; \
	fi

## üé® Formatea c√≥digo
format: format-backend format-frontend
	@echo "$(GREEN)‚úÖ Formato aplicado$(NC)"

## üêç Formato del backend
format-backend:
	@echo "$(BLUE)üé® Formateando c√≥digo del backend...$(NC)"
	@if [ -d "$(BACKEND_DIR)/venv" ]; then \
		cd $(BACKEND_DIR) && source venv/bin/activate && \
		if command -v black >/dev/null 2>&1; then black src/ tests/; fi && \
		if command -v isort >/dev/null 2>&1; then isort src/ tests/; fi; \
	fi

## ‚öõÔ∏è Formato del frontend
format-frontend:
	@echo "$(BLUE)üé® Formateando c√≥digo del frontend...$(NC)"
	@if [ -f "$(FRONTEND_DIR)/package.json" ]; then \
		cd $(FRONTEND_DIR) && npm run format; \
	fi

## üßπ Limpia archivos temporales
clean:
	@echo "$(BLUE)üßπ Limpiando archivos temporales...$(NC)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -delete
	@find . -type d -name ".pytest_cache" -delete
	@find . -type d -name "*.egg-info" -delete
	@find . -type f -name ".coverage" -delete
	@find . -type d -name "node_modules" -prune -o -type f -name "*.log" -delete
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

## üß® Reset completo del entorno
reset: clean stop-services
	@echo "$(YELLOW)‚ö†Ô∏è Eliminando vol√∫menes Docker...$(NC)"
	@docker-compose down -v
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Reset completado$(NC)"
