# üöÄ Pulso-AI Python Project Configuration
# Configuraci√≥n moderna para herramientas de Python

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pulso-ai-core"
version = "0.1.0"
description = "Plataforma de dashboards configurables multi-cliente con cross-filtering inteligente"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Pulso-AI Contributors", email = "contributors@pulso-ai.dev"}
]
maintainers = [
    {name = "reyer3", email = "reyer3@users.noreply.github.com"}
]
keywords = ["business-intelligence", "dashboard", "multi-tenant", "graphql", "polars"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Framework :: FastAPI",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "strawberry-graphql[fastapi]>=0.218.0",
    "polars>=0.20.0",
    "sqlalchemy>=2.0.20",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]
prod = [
    "gunicorn>=21.2.0",
    "sentry-sdk[fastapi]>=1.39.0",
    "prometheus-client>=0.19.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "factory-boy>=3.3.0",
    "httpx>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/reyer3/Pulso-AI"
Documentation = "https://pulso-ai.readthedocs.io"
Repository = "https://github.com/reyer3/Pulso-AI"
Issues = "https://github.com/reyer3/Pulso-AI/issues"
Changelog = "https://github.com/reyer3/Pulso-AI/blob/main/CHANGELOG.md"

[project.scripts]
pulso-ai = "src.cli:main"

# =====================================
# üé® BLACK CONFIGURATION
# =====================================
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | env
  | venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# =====================================
# üì¶ ISORT CONFIGURATION
# =====================================
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*", "*/env/*"]
known_first_party = ["src", "shared"]
known_third_party = [
    "fastapi", "strawberry", "polars", "pydantic", "sqlalchemy",
    "asyncpg", "redis", "celery", "pytest", "httpx"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# =====================================
# üîç MYPY CONFIGURATION
# =====================================
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Paths
files = ["src", "tests"]
exclude = [
    "migrations/",
    "venv/",
    "env/",
    ".venv/",
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "polars.*",
    "google.cloud.*",
    "redis.*",
    "celery.*",
    "strawberry.*",
]
ignore_missing_imports = true

# =====================================
# üõ°Ô∏è BANDIT CONFIGURATION
# =====================================
[tool.bandit]
exclude_dirs = ["tests", "venv", "env", ".venv"]
skips = [
    "B101",  # assert_used - we use asserts in tests
    "B601",  # paramiko_calls - if we use paramiko for deployment
]

# =====================================
# üìä COVERAGE CONFIGURATION
# =====================================
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    ".venv/*",
    "setup.py",
    "conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "pass",
    "\\.\\.\\.",
]
ignore_errors = true
show_missing = true
skip_covered = false
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# =====================================
# üß™ PYTEST CONFIGURATION
# =====================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
    "--strict-markers",
    "--strict-config",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "database: Tests requiring database",
    "redis: Tests requiring Redis",
    "bigquery: Tests requiring BigQuery",
]

# =====================================
# üîß RUFF CONFIGURATION (Modern Alternative)
# =====================================
[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
select = ["E4", "E7", "E9", "F", "I", "N", "UP", "B", "A", "C4", "DTZ", "T20", "PT"]
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without from inside except
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
