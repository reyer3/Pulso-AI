# ðŸ§ª Pulso-AI Pytest Configuration
# ConfiguraciÃ³n para testing con pytest

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py", "tests.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]

# Minimum version
minversion = "7.0"

# Add options
addopts = [
    # Coverage
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    
    # Output formatting
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    
    # Warnings
    "--disable-warnings",
    "-p no:warnings",
    
    # Performance
    "--durations=10",
    
    # Parallel execution (uncomment for faster tests)
    # "-n auto",
    
    # Live logging
    "--log-cli-level=INFO",
    "--log-cli-format=%(asctime)s [%(levelname)8s] %(name)s: %(message)s",
    "--log-cli-date-format=%Y-%m-%d %H:%M:%S",
]

# Test markers for organization
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, with external dependencies)",
    "e2e: End-to-end tests (slowest, full system)",
    "slow: Tests that take more than a few seconds",
    "database: Tests that require database connection",
    "redis: Tests that require Redis connection",
    "bigquery: Tests that require BigQuery connection",
    "client_movistar: Tests specific to Movistar client",
    "client_claro: Tests specific to Claro client", 
    "client_tigo: Tests specific to Tigo client",
    "cross_filtering: Tests for cross-filtering functionality",
    "auth: Authentication and authorization tests",
    "performance: Performance benchmark tests",
    "security: Security-related tests",
]

# Async support
asyncio_mode = "auto"

# Filter warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
    "ignore:.*datetime.*:DeprecationWarning:botocore.*",
]

# Test timeout
timeout = 300

# Collection
collect_ignore = [
    "setup.py",
    "conftest.py"
]

# Logging
log_auto_indent = true
log_cli = true

# JUnit XML output for CI/CD
junit_family = "xunit2"
junit_logging = "system-out"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "conftest.py"
]

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "pass",
    "\\.\\.\\.",
]

ignore_errors = true
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"
