# üöÄ Pulso-AI Pre-commit Configuration
# Hooks para mantener calidad del c√≥digo antes de commits

repos:
  # =====================================
  # üîç GENERAL CODE QUALITY
  # =====================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Seguridad b√°sica
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: detect-private-key
      - id: check-yaml
      - id: check-toml
      - id: check-json
      
      # Formato y limpieza
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: mixed-line-ending
        args: ['--fix=lf']
      
      # Python espec√≠fico
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: ['--django']

  # =====================================
  # üêç PYTHON CODE FORMATTING
  # =====================================
  
  # Black - Code formatter
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        name: Format Python code with Black
        language_version: python3.11
        args: [--line-length=88]
        files: ^(core-template|shared)/.*\.py$

  # isort - Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: Sort Python imports with isort
        args: [--profile=black, --line-length=88]
        files: ^(core-template|shared)/.*\.py$

  # =====================================
  # üîç PYTHON LINTING & TYPE CHECKING
  # =====================================
  
  # Flake8 - Linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        name: Lint Python code with Flake8
        args: [
          --max-line-length=88,
          --extend-ignore=E203,W503,
          --max-complexity=10,
          --per-file-ignores=__init__.py:F401
        ]
        files: ^(core-template|shared)/.*\.py$
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify

  # MyPy - Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        name: Type check Python code with MyPy
        args: [--ignore-missing-imports, --strict]
        files: ^core-template/src/.*\.py$
        additional_dependencies:
          - types-requests
          - types-redis
          - types-PyYAML

  # =====================================
  # ‚öõÔ∏è FRONTEND FORMATTING & LINTING
  # =====================================
  
  # Prettier - Code formatter for JS/TS/CSS/etc
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        name: Format frontend code with Prettier
        types_or: [javascript, jsx, ts, tsx, css, scss, json, yaml, markdown]
        files: ^frontend/.*\.(js|jsx|ts|tsx|css|scss|json|yaml|yml|md)$
        args: [--print-width=80, --tab-width=2, --single-quote, --trailing-comma=es5]

  # ESLint - JavaScript/TypeScript linting
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.47.0
    hooks:
      - id: eslint
        name: Lint frontend code with ESLint
        files: ^frontend/.*\.(js|jsx|ts|tsx)$
        types: [file]
        additional_dependencies:
          - '@typescript-eslint/eslint-plugin@^6.0.0'
          - '@typescript-eslint/parser@^6.0.0'
          - 'eslint-config-prettier@^9.0.0'
          - 'eslint-plugin-react@^7.33.0'
          - 'eslint-plugin-react-hooks@^4.6.0'

  # =====================================
  # üìù DOCUMENTATION & CONFIGURATION
  # =====================================
  
  # YAML Linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        name: Lint YAML files
        args: [
          -d, '{ 
            extends: default, 
            rules: { 
              line-length: {max: 120}, 
              comments-indentation: disable,
              document-start: disable
            } 
          }'
        ]
        files: ^.*\.(yaml|yml)$

  # =====================================
  # üîê SECURITY SCANNING
  # =====================================
  
  # Bandit - Security linting for Python
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Security scan Python code with Bandit
        args: [-r, -f, json, -o, bandit-report.json]
        files: ^(core-template|shared)/.*\.py$
        exclude: ^.*/(tests|test_)/.*\.py$

  # Safety - Check Python dependencies for known vulnerabilities
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

  # =====================================
  # üóÑÔ∏è SQL & DATABASE
  # =====================================
  
  # SQL formatting
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 2.3.2
    hooks:
      - id: sqlfluff-lint
        name: Lint SQL files
        files: ^.*\.sql$
        args: [--dialect=postgres]
      - id: sqlfluff-fix
        name: Fix SQL formatting
        files: ^.*\.sql$
        args: [--dialect=postgres]

  # =====================================
  # üìä COMMIT MESSAGE FORMATTING
  # =====================================
  
  # Conventional Commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v2.4.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]

  # =====================================
  # üèóÔ∏è PROJECT SPECIFIC
  # =====================================
  
  # Custom Pulso-AI validation
  - repo: local
    hooks:
      # Validate client configurations
      - id: validate-client-config
        name: Validate client configuration files
        entry: python scripts/validate_client_config.py
        language: system
        files: ^clients/.*/config/.*\.yaml$
        pass_filenames: true
        
      # Check environment variables
      - id: check-env-vars
        name: Check .env files for required variables
        entry: python scripts/check_env_vars.py
        language: system
        files: ^\.env.*$
        pass_filenames: true
        
      # Validate Docker configurations
      - id: validate-docker-compose
        name: Validate Docker Compose files
        entry: docker-compose config -q
        language: system
        files: ^.*docker-compose.*\.ya?ml$
        pass_filenames: false

# =====================================
# ‚öôÔ∏è CONFIGURATION
# =====================================

default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: '3.0.0'

# Custom configuration for tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [
    # Skip hooks that require local environment
    validate-client-config,
    check-env-vars,
    validate-docker-compose,
    python-safety-dependencies-check
  ]
  submodules: false
